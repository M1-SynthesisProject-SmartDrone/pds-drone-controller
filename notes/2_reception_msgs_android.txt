==== PHASE 1 : reception des messages ====
    ---- Conception ----
            On veut dans un premier temps juste recevoir les infos venant de l'app
            L'application s'en fiche de recevoir des réponses
                ==> Serveur UDP

            On a qu'une seule application qui peut communiquer avec le serveur à la fois,
            pas besoin de faire du multi-threading pour gérer plusieurs clients

            Le thread principal doit gérer les files de messages (1 pour l'instant mais ça pourrait changer):
                - Une pour les messages à envoyer au drône

    ---- Implem ----
        --> Le main va contenir les threads des multiples processus (qui viendront plus tard)
            ==> On veut une classe à part pour faire le serveur

        --> On doit prévoir d'avoir un moyen d'envoyer les messages reçus par le tel vers le drône
            ==> On peut avoir un singleton qui va gérer les infos reçues, et les envoyer une par une au drone

    ---- Resultats ----

        Utilisation de libraires pour parser le json : https://github.com/simdjson/simdjson
            ==> Le plus rapide des parsers, avec gestion d'erreurs etc.

        On a : 
            - UDPSocket, qui s'occupe de tout ce qui est connexion (envoi, reception message) avec exceptions
            - AndroidReceiver, qui attend le message (via UDPSocket) et qui va traduire le message grâce à...
            - Abstract_AndroidMessageConverter, qui a que 2 methodes : message vers struct et struct vers message (pas encore implem)
                - Json_AndroidMessageConverter, implem qui s'occupe du json avec le lib simdjson

        Problèmes visibles : 
            * Si on reçoit un message unparsable, le message suivant n'est des fois pas parsé non plus
                --> à voir si c'est à cause de netcat, ou qu'il faut changer 2-3 trucs
            
            * Le parsing du double fail si on a plus de 6 chiffres après la virgule

==== PHASE 2 : stockage des messages dans une liste partagée entre threads ====

    Déjà on va mettre le thread Android dans une classe à part
        ==> On utilise la classe de base "Abstract_ThreadClass" pour éviter de tout réécrire (merci Sylvain !)


==== MULTIPLE MESSAGES ====
    On a plusieurs messages qui vont devoir être reçus 
    Le plus simple est donc d'avoir un objet de type :
    {
        "type": "ARM",
        "content": {
            ...
        }
    }

    
